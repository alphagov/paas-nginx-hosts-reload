// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"
	"time"

	"github.com/alphagov/paas-nginx-hosts-reload/utils"
)

type FakeUtils struct {
	FindNginxPIDStub        func(string, string) (int32, error)
	findNginxPIDMutex       sync.RWMutex
	findNginxPIDArgsForCall []struct {
		arg1 string
		arg2 string
	}
	findNginxPIDReturns struct {
		result1 int32
		result2 error
	}
	findNginxPIDReturnsOnCall map[int]struct {
		result1 int32
		result2 error
	}
	ModTimeStub        func() (time.Time, error)
	modTimeMutex       sync.RWMutex
	modTimeArgsForCall []struct {
	}
	modTimeReturns struct {
		result1 time.Time
		result2 error
	}
	modTimeReturnsOnCall map[int]struct {
		result1 time.Time
		result2 error
	}
	SigHupStub        func(int32) error
	sigHupMutex       sync.RWMutex
	sigHupArgsForCall []struct {
		arg1 int32
	}
	sigHupReturns struct {
		result1 error
	}
	sigHupReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUtils) FindNginxPID(arg1 string, arg2 string) (int32, error) {
	fake.findNginxPIDMutex.Lock()
	ret, specificReturn := fake.findNginxPIDReturnsOnCall[len(fake.findNginxPIDArgsForCall)]
	fake.findNginxPIDArgsForCall = append(fake.findNginxPIDArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.FindNginxPIDStub
	fakeReturns := fake.findNginxPIDReturns
	fake.recordInvocation("FindNginxPID", []interface{}{arg1, arg2})
	fake.findNginxPIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUtils) FindNginxPIDCallCount() int {
	fake.findNginxPIDMutex.RLock()
	defer fake.findNginxPIDMutex.RUnlock()
	return len(fake.findNginxPIDArgsForCall)
}

func (fake *FakeUtils) FindNginxPIDCalls(stub func(string, string) (int32, error)) {
	fake.findNginxPIDMutex.Lock()
	defer fake.findNginxPIDMutex.Unlock()
	fake.FindNginxPIDStub = stub
}

func (fake *FakeUtils) FindNginxPIDArgsForCall(i int) (string, string) {
	fake.findNginxPIDMutex.RLock()
	defer fake.findNginxPIDMutex.RUnlock()
	argsForCall := fake.findNginxPIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUtils) FindNginxPIDReturns(result1 int32, result2 error) {
	fake.findNginxPIDMutex.Lock()
	defer fake.findNginxPIDMutex.Unlock()
	fake.FindNginxPIDStub = nil
	fake.findNginxPIDReturns = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *FakeUtils) FindNginxPIDReturnsOnCall(i int, result1 int32, result2 error) {
	fake.findNginxPIDMutex.Lock()
	defer fake.findNginxPIDMutex.Unlock()
	fake.FindNginxPIDStub = nil
	if fake.findNginxPIDReturnsOnCall == nil {
		fake.findNginxPIDReturnsOnCall = make(map[int]struct {
			result1 int32
			result2 error
		})
	}
	fake.findNginxPIDReturnsOnCall[i] = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *FakeUtils) ModTime() (time.Time, error) {
	fake.modTimeMutex.Lock()
	ret, specificReturn := fake.modTimeReturnsOnCall[len(fake.modTimeArgsForCall)]
	fake.modTimeArgsForCall = append(fake.modTimeArgsForCall, struct {
	}{})
	stub := fake.ModTimeStub
	fakeReturns := fake.modTimeReturns
	fake.recordInvocation("ModTime", []interface{}{})
	fake.modTimeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUtils) ModTimeCallCount() int {
	fake.modTimeMutex.RLock()
	defer fake.modTimeMutex.RUnlock()
	return len(fake.modTimeArgsForCall)
}

func (fake *FakeUtils) ModTimeCalls(stub func() (time.Time, error)) {
	fake.modTimeMutex.Lock()
	defer fake.modTimeMutex.Unlock()
	fake.ModTimeStub = stub
}

func (fake *FakeUtils) ModTimeReturns(result1 time.Time, result2 error) {
	fake.modTimeMutex.Lock()
	defer fake.modTimeMutex.Unlock()
	fake.ModTimeStub = nil
	fake.modTimeReturns = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeUtils) ModTimeReturnsOnCall(i int, result1 time.Time, result2 error) {
	fake.modTimeMutex.Lock()
	defer fake.modTimeMutex.Unlock()
	fake.ModTimeStub = nil
	if fake.modTimeReturnsOnCall == nil {
		fake.modTimeReturnsOnCall = make(map[int]struct {
			result1 time.Time
			result2 error
		})
	}
	fake.modTimeReturnsOnCall[i] = struct {
		result1 time.Time
		result2 error
	}{result1, result2}
}

func (fake *FakeUtils) SigHup(arg1 int32) error {
	fake.sigHupMutex.Lock()
	ret, specificReturn := fake.sigHupReturnsOnCall[len(fake.sigHupArgsForCall)]
	fake.sigHupArgsForCall = append(fake.sigHupArgsForCall, struct {
		arg1 int32
	}{arg1})
	stub := fake.SigHupStub
	fakeReturns := fake.sigHupReturns
	fake.recordInvocation("SigHup", []interface{}{arg1})
	fake.sigHupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUtils) SigHupCallCount() int {
	fake.sigHupMutex.RLock()
	defer fake.sigHupMutex.RUnlock()
	return len(fake.sigHupArgsForCall)
}

func (fake *FakeUtils) SigHupCalls(stub func(int32) error) {
	fake.sigHupMutex.Lock()
	defer fake.sigHupMutex.Unlock()
	fake.SigHupStub = stub
}

func (fake *FakeUtils) SigHupArgsForCall(i int) int32 {
	fake.sigHupMutex.RLock()
	defer fake.sigHupMutex.RUnlock()
	argsForCall := fake.sigHupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUtils) SigHupReturns(result1 error) {
	fake.sigHupMutex.Lock()
	defer fake.sigHupMutex.Unlock()
	fake.SigHupStub = nil
	fake.sigHupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUtils) SigHupReturnsOnCall(i int, result1 error) {
	fake.sigHupMutex.Lock()
	defer fake.sigHupMutex.Unlock()
	fake.SigHupStub = nil
	if fake.sigHupReturnsOnCall == nil {
		fake.sigHupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sigHupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUtils) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findNginxPIDMutex.RLock()
	defer fake.findNginxPIDMutex.RUnlock()
	fake.modTimeMutex.RLock()
	defer fake.modTimeMutex.RUnlock()
	fake.sigHupMutex.RLock()
	defer fake.sigHupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUtils) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.Utils = new(FakeUtils)
